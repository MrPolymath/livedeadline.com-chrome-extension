{"version":3,"file":"newtab.f4007948a406f8f7dc5b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;;;;;AC/FA","sources":["webpack://lumo-chrome-extension/./src/pages/Newtab/Countdown/Countdown.jsx","webpack://lumo-chrome-extension/webpack/runtime/getFullHash"],"sourcesContent":["import { useSettingsStore } from \"../../../common/useSettingsStore\";\nimport React, { useEffect, useState, useCallback } from \"react\";\n\nconst Countdown = () => {\n  const [settings] = useSettingsStore();\n  // read settings from useSettingsStore\n  const {\n    countdownText,\n    countdownEndTime,\n    backgroundColor,\n    daysColor,\n    decimalsColor,\n    daysTextColor,\n    deadlineTextColor,\n  } = settings;\n\n  const [daysLeft, setDaysLeft] = useState(0);\n  const [percentageString, setPercentageString] = useState(\"0000000\");\n\n  const calculatePercentage = useCallback(() => {\n    if (!countdownEndTime) return \"0000000\";\n    const now = new Date().getTime();\n    const remainingTime = countdownEndTime - now;\n\n    if (remainingTime <= 0) {\n      return \"0000000\";\n    }\n\n    const remainingTimeInCurrentDay = remainingTime % 86400000;\n\n    const percentageOfDay = remainingTimeInCurrentDay / 86400000;\n    const percentageRounded = (percentageOfDay * 10000000).toFixed(0);\n\n    return percentageRounded.padStart(7, \"0\");\n  }, [countdownEndTime]);\n\n  // I want to print the state of settings after 2 seconds of loading the page\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(settings);\n    }, 2000);\n  }, [settings]);\n\n  useEffect(() => {\n    if (countdownEndTime) {\n      setPercentageString(calculatePercentage());\n\n      const interval = setInterval(() => {\n        setPercentageString(calculatePercentage());\n      }, 100);\n\n      const calculateDaysLeft = () => {\n        const daysLeftCalculated = Math.floor(\n          (countdownEndTime - Date.now()) / 1000 / 60 / 60 / 24\n        );\n        setDaysLeft(daysLeftCalculated);\n      };\n\n      calculateDaysLeft();\n\n      return () => clearInterval(interval);\n    }\n  }, [countdownEndTime, calculatePercentage]);\n\n  return (\n    <main\n      className=\"flex min-h-screen flex-col items-center justify-center p-24\"\n      style={{ backgroundColor }}\n    >\n      <div>\n        <div className=\"flex items-center justify-center\">\n          <div className=\"font-bold text-8xl\" style={{ color: daysColor }}>\n            {daysLeft}\n          </div>\n          <div className=\"flex flex-col\">\n            <div\n              className=\"text-3xl font-semibold font-mono\"\n              style={{ color: decimalsColor }}\n            >\n              <span>.</span>\n              <span>{percentageString}</span>\n            </div>\n            <div className=\"text-3xl pl-4\" style={{ color: daysTextColor }}>\n              days\n            </div>\n          </div>\n        </div>\n        <div className=\"text-3xl mt-5\" style={{ color: deadlineTextColor }}>\n          {countdownText}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Countdown;\n","__webpack_require__.h = () => (\"5ae2a68c258ee64dace3\")"],"names":[],"sourceRoot":""}